# ai_api.py
from flask import Flask, request, jsonify
from transformers import pipeline
from fiyat_cekici import letgo_arama
from flask_cors import CORS

app = Flask(__name__)
CORS(app)
# ğŸ“Œ Zero-shot modeli (Ã§ok stabil)
classifier = pipeline(
    "zero-shot-classification",
    model="facebook/bart-large-mnli"
)

# ğŸ“¦ Tahmin edilecek aÃ§Ä±klamalÄ± kategoriler

CATEGORIES = [
    "Elektronik Ã¼rÃ¼nler (telefon, bilgisayar, televizyon vs.)",
    "Moda ve giyim (kÄ±yafet, ayakkabÄ±, aksesuar)",
    "Ev ve yaÅŸam Ã¼rÃ¼nleri (mobilya, ev dekorasyonu, mutfak araÃ§larÄ±)",
    "Spor ve outdoor ekipmanlarÄ± (bisiklet, kamp eÅŸyalarÄ±, fitness aletleri)",
    "Otomotiv ve yedek parÃ§alar (araba parÃ§alarÄ±, araÃ§lar)",
    "Antika eÅŸyalar (eski saatler, koleksiyon Ã¼rÃ¼nleri)",
    "Sanat eserleri ve el sanatlarÄ± (resim, el iÅŸi, heykel)",
    "Hobi ve oyuncaklar (lego, model uÃ§ak, maket)",
    "Kitap, film ve mÃ¼zik Ã¼rÃ¼nleri (roman, CD, plak)",
    "DiÄŸer (kategori dÄ±ÅŸÄ± Ã¼rÃ¼nler)"
]

@app.route("/predict/", methods=["POST"])
def predict():
    data = request.get_json()
    title = data.get("title", "")
    description = data.get("description", "")
    if not title or not description:
        return jsonify({"error": "title ve description zorunludur"}), 400

    text = f"{title.strip()}. {description.strip()}"
    web_price_estimate = letgo_arama(title)
    result = classifier(text, CATEGORIES)

    return jsonify({
        "predicted_category": result["labels"][0],
        "confidence": round(result["scores"][0] * 100, 2),
        "estimated_price_web": web_price_estimate
    })

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5001)
